/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/* auto-generated by NAPI-RS */

const { existsSync, readFileSync } = require('fs')
const { join } = require('path')

const { platform, arch } = process

let nativeBinding = null
let localFileExisted = false
let loadError = null

function isMusl() {
  // For Node 10
  if (!process.report || typeof process.report.getReport !== 'function') {
    try {
      const lddPath = require('child_process').execSync('which ldd').toString().trim()
      return readFileSync(lddPath, 'utf8').includes('musl')
    } catch (e) {
      return true
    }
  } else {
    const { glibcVersionRuntime } = process.report.getReport().header
    return !glibcVersionRuntime
  }
}

switch (platform) {
  case 'android':
    switch (arch) {
      case 'arm64':
        localFileExisted = existsSync(join(__dirname, 'test.android-arm64.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./test.android-arm64.node')
          } else {
            nativeBinding = require('test-android-arm64')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'arm':
        localFileExisted = existsSync(join(__dirname, 'test.android-arm-eabi.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./test.android-arm-eabi.node')
          } else {
            nativeBinding = require('test-android-arm-eabi')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on Android ${arch}`)
    }
    break
  case 'win32':
    switch (arch) {
      case 'x64':
        localFileExisted = existsSync(
          join(__dirname, 'test.win32-x64-msvc.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./test.win32-x64-msvc.node')
          } else {
            nativeBinding = require('test-win32-x64-msvc')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'ia32':
        localFileExisted = existsSync(
          join(__dirname, 'test.win32-ia32-msvc.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./test.win32-ia32-msvc.node')
          } else {
            nativeBinding = require('test-win32-ia32-msvc')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'arm64':
        localFileExisted = existsSync(
          join(__dirname, 'test.win32-arm64-msvc.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./test.win32-arm64-msvc.node')
          } else {
            nativeBinding = require('test-win32-arm64-msvc')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on Windows: ${arch}`)
    }
    break
  case 'darwin':
    localFileExisted = existsSync(join(__dirname, 'test.darwin-universal.node'))
    try {
      if (localFileExisted) {
        nativeBinding = require('./test.darwin-universal.node')
      } else {
        nativeBinding = require('test-darwin-universal')
      }
      break
    } catch {}
    switch (arch) {
      case 'x64':
        localFileExisted = existsSync(join(__dirname, 'test.darwin-x64.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./test.darwin-x64.node')
          } else {
            nativeBinding = require('test-darwin-x64')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'arm64':
        localFileExisted = existsSync(
          join(__dirname, 'test.darwin-arm64.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./test.darwin-arm64.node')
          } else {
            nativeBinding = require('test-darwin-arm64')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on macOS: ${arch}`)
    }
    break
  case 'freebsd':
    if (arch !== 'x64') {
      throw new Error(`Unsupported architecture on FreeBSD: ${arch}`)
    }
    localFileExisted = existsSync(join(__dirname, 'test.freebsd-x64.node'))
    try {
      if (localFileExisted) {
        nativeBinding = require('./test.freebsd-x64.node')
      } else {
        nativeBinding = require('test-freebsd-x64')
      }
    } catch (e) {
      loadError = e
    }
    break
  case 'linux':
    switch (arch) {
      case 'x64':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'test.linux-x64-musl.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./test.linux-x64-musl.node')
            } else {
              nativeBinding = require('test-linux-x64-musl')
            }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'test.linux-x64-gnu.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./test.linux-x64-gnu.node')
            } else {
              nativeBinding = require('test-linux-x64-gnu')
            }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 'arm64':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'test.linux-arm64-musl.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./test.linux-arm64-musl.node')
            } else {
              nativeBinding = require('test-linux-arm64-musl')
            }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'test.linux-arm64-gnu.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./test.linux-arm64-gnu.node')
            } else {
              nativeBinding = require('test-linux-arm64-gnu')
            }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 'arm':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'test.linux-arm-musleabihf.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./test.linux-arm-musleabihf.node')
            } else {
              nativeBinding = require('test-linux-arm-musleabihf')
            }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'test.linux-arm-gnueabihf.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./test.linux-arm-gnueabihf.node')
            } else {
              nativeBinding = require('test-linux-arm-gnueabihf')
            }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 'riscv64':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'test.linux-riscv64-musl.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./test.linux-riscv64-musl.node')
            } else {
              nativeBinding = require('test-linux-riscv64-musl')
            }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'test.linux-riscv64-gnu.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./test.linux-riscv64-gnu.node')
            } else {
              nativeBinding = require('test-linux-riscv64-gnu')
            }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 's390x':
        localFileExisted = existsSync(
          join(__dirname, 'test.linux-s390x-gnu.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./test.linux-s390x-gnu.node')
          } else {
            nativeBinding = require('test-linux-s390x-gnu')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on Linux: ${arch}`)
    }
    break
  default:
    throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`)
}

if (!nativeBinding) {
  if (loadError) {
    throw loadError
  }
  throw new Error(`Failed to load native binding`)
}

const { VoidPointer, Allocator, Array, AsyncQueue, BookmarkFile, ByteArray, Bytes, Cache, Checksum, Completion, Cond, Data, Date, DateTime, DebugKey, Dir, Error, HashTable, HashTableIter, Hmac, Hook, HookList, IoChannel, IoFuncs, KeyFile, List, LogField, MainContext, MainLoop, MappedFile, MarkupParseContext, MarkupParser, MatchInfo, MemChunk, MemVTable, Node, Once, OptionContext, OptionEntry, OptionGroup, PathBuf, PatternSpec, PollFd, Private, PtrArray, Queue, RwLock, Rand, RecMutex, Regex, Relation, SList, Scanner, ScannerConfig, Sequence, SequenceIter, Source, SourceCallbackFuncs, SourceFuncs, SourcePrivate, StatBuf, String, StringChunk, StrvBuilder, TestCase, TestConfig, TestLogBuffer, TestLogMsg, TestSuite, Thread, ThreadPool, TimeVal, TimeZone, Timer, TrashStack, Tree, TreeNode, Tuples, UnixPipe, Uri, UriParamsIter, Variant, VariantBuilder, VariantDict, VariantType, alignedFree, asciiDigitValue, asciiTolower, asciiToupper, asciiXdigitValue, atomicIntAdd, atomicIntAnd, atomicIntCompareAndExchange, atomicIntDecAndTest, atomicIntExchange, atomicIntGet, atomicIntInc, atomicIntOr, atomicIntSet, atomicIntXor, atomicPointerAdd, atomicPointerCompareAndExchange, atomicPointerSet, atomicRcBoxRelease, atomicRefCountCompare, atomicRefCountDec, atomicRefCountInc, atomicRefCountInit, bitLock, bitTrylock, bitUnlock, blowChunks, bookmarkFileErrorQuark, checkVersion, clearError, close, closefrom, convertErrorQuark, datasetDestroy, dateGetMondayWeeksInYear, dateGetSundayWeeksInYear, dateIsLeapYear, dateValidDay, dateValidJulian, dateValidYear, directEqual, directHash, doubleEqual, doubleHash, fdwalkSetCloexec, fileErrorQuark, free, fsync, getApplicationName, getCodeset, getCurrentDir, getHomeDir, getHostName, getMonotonicTime, getNumProcessors, getPrgname, getRealName, getRealTime, getTmpDir, getUserCacheDir, getUserConfigDir, getUserDataDir, getUserName, getUserRuntimeDir, getUserStateDir, idleRemoveByData, int64Equal, int64Hash, intEqual, intHash, ioChannelErrorQuark, keyFileErrorQuark, listPopAllocator, logGetDebugEnabled, logSetDebugEnabled, logWriterDefaultSetUseStderr, logWriterIsJournald, logWriterSupportsColor, mainDepth, markupErrorQuark, memChunkInfo, nodePopAllocator, nullifyPointer, numberParserErrorQuark, onceInitEnterPointer, onceInitLeavePointer, optionErrorQuark, pathBufEqual, pointerBitLock, pointerBitTrylock, pointerBitUnlock, quarkToString, randomInt, randomIntRange, randomSetSeed, rcBoxRelease, refCountCompare, refCountDec, refCountInc, refCountInit, regexErrorQuark, reloadUserSpecialDirsCache, shellErrorQuark, slistPopAllocator, sourceRemove, sourceRemoveByUserData, spacedPrimesClosest, spawnCheckWaitStatus, spawnClosePid, spawnErrorQuark, spawnExitErrorQuark, strEqual, strHash, strerror, strsignal, testDisableCrashReporting, testFail, testFailed, testGetPath, testQueueFree, testRandInt, testRandIntRange, testRun, testSetNonfatalAssertions, testSubprocess, testTimerStart, testTrapHasPassed, testTrapReachedTimeout, threadErrorQuark, threadExit, threadPoolGetMaxIdleTime, threadPoolGetMaxUnusedThreads, threadPoolGetNumUnusedThreads, threadPoolSetMaxIdleTime, threadPoolSetMaxUnusedThreads, threadPoolStopUnusedThreads, threadYield, unixErrorQuark, unixSetFdNonblocking, uriErrorQuark, uuidStringRandom, variantParseErrorQuark } = nativeBinding

module.exports.VoidPointer = VoidPointer
module.exports.Allocator = Allocator
module.exports.Array = Array
module.exports.AsyncQueue = AsyncQueue
module.exports.BookmarkFile = BookmarkFile
module.exports.ByteArray = ByteArray
module.exports.Bytes = Bytes
module.exports.Cache = Cache
module.exports.Checksum = Checksum
module.exports.Completion = Completion
module.exports.Cond = Cond
module.exports.Data = Data
module.exports.Date = Date
module.exports.DateTime = DateTime
module.exports.DebugKey = DebugKey
module.exports.Dir = Dir
module.exports.Error = Error
module.exports.HashTable = HashTable
module.exports.HashTableIter = HashTableIter
module.exports.Hmac = Hmac
module.exports.Hook = Hook
module.exports.HookList = HookList
module.exports.IoChannel = IoChannel
module.exports.IoFuncs = IoFuncs
module.exports.KeyFile = KeyFile
module.exports.List = List
module.exports.LogField = LogField
module.exports.MainContext = MainContext
module.exports.MainLoop = MainLoop
module.exports.MappedFile = MappedFile
module.exports.MarkupParseContext = MarkupParseContext
module.exports.MarkupParser = MarkupParser
module.exports.MatchInfo = MatchInfo
module.exports.MemChunk = MemChunk
module.exports.MemVTable = MemVTable
module.exports.Node = Node
module.exports.Once = Once
module.exports.OptionContext = OptionContext
module.exports.OptionEntry = OptionEntry
module.exports.OptionGroup = OptionGroup
module.exports.PathBuf = PathBuf
module.exports.PatternSpec = PatternSpec
module.exports.PollFd = PollFd
module.exports.Private = Private
module.exports.PtrArray = PtrArray
module.exports.Queue = Queue
module.exports.RwLock = RwLock
module.exports.Rand = Rand
module.exports.RecMutex = RecMutex
module.exports.Regex = Regex
module.exports.Relation = Relation
module.exports.SList = SList
module.exports.Scanner = Scanner
module.exports.ScannerConfig = ScannerConfig
module.exports.Sequence = Sequence
module.exports.SequenceIter = SequenceIter
module.exports.Source = Source
module.exports.SourceCallbackFuncs = SourceCallbackFuncs
module.exports.SourceFuncs = SourceFuncs
module.exports.SourcePrivate = SourcePrivate
module.exports.StatBuf = StatBuf
module.exports.String = String
module.exports.StringChunk = StringChunk
module.exports.StrvBuilder = StrvBuilder
module.exports.TestCase = TestCase
module.exports.TestConfig = TestConfig
module.exports.TestLogBuffer = TestLogBuffer
module.exports.TestLogMsg = TestLogMsg
module.exports.TestSuite = TestSuite
module.exports.Thread = Thread
module.exports.ThreadPool = ThreadPool
module.exports.TimeVal = TimeVal
module.exports.TimeZone = TimeZone
module.exports.Timer = Timer
module.exports.TrashStack = TrashStack
module.exports.Tree = Tree
module.exports.TreeNode = TreeNode
module.exports.Tuples = Tuples
module.exports.UnixPipe = UnixPipe
module.exports.Uri = Uri
module.exports.UriParamsIter = UriParamsIter
module.exports.Variant = Variant
module.exports.VariantBuilder = VariantBuilder
module.exports.VariantDict = VariantDict
module.exports.VariantType = VariantType
module.exports.alignedFree = alignedFree
module.exports.asciiDigitValue = asciiDigitValue
module.exports.asciiTolower = asciiTolower
module.exports.asciiToupper = asciiToupper
module.exports.asciiXdigitValue = asciiXdigitValue
module.exports.atomicIntAdd = atomicIntAdd
module.exports.atomicIntAnd = atomicIntAnd
module.exports.atomicIntCompareAndExchange = atomicIntCompareAndExchange
module.exports.atomicIntDecAndTest = atomicIntDecAndTest
module.exports.atomicIntExchange = atomicIntExchange
module.exports.atomicIntGet = atomicIntGet
module.exports.atomicIntInc = atomicIntInc
module.exports.atomicIntOr = atomicIntOr
module.exports.atomicIntSet = atomicIntSet
module.exports.atomicIntXor = atomicIntXor
module.exports.atomicPointerAdd = atomicPointerAdd
module.exports.atomicPointerCompareAndExchange = atomicPointerCompareAndExchange
module.exports.atomicPointerSet = atomicPointerSet
module.exports.atomicRcBoxRelease = atomicRcBoxRelease
module.exports.atomicRefCountCompare = atomicRefCountCompare
module.exports.atomicRefCountDec = atomicRefCountDec
module.exports.atomicRefCountInc = atomicRefCountInc
module.exports.atomicRefCountInit = atomicRefCountInit
module.exports.bitLock = bitLock
module.exports.bitTrylock = bitTrylock
module.exports.bitUnlock = bitUnlock
module.exports.blowChunks = blowChunks
module.exports.bookmarkFileErrorQuark = bookmarkFileErrorQuark
module.exports.checkVersion = checkVersion
module.exports.clearError = clearError
module.exports.close = close
module.exports.closefrom = closefrom
module.exports.convertErrorQuark = convertErrorQuark
module.exports.datasetDestroy = datasetDestroy
module.exports.dateGetMondayWeeksInYear = dateGetMondayWeeksInYear
module.exports.dateGetSundayWeeksInYear = dateGetSundayWeeksInYear
module.exports.dateIsLeapYear = dateIsLeapYear
module.exports.dateValidDay = dateValidDay
module.exports.dateValidJulian = dateValidJulian
module.exports.dateValidYear = dateValidYear
module.exports.directEqual = directEqual
module.exports.directHash = directHash
module.exports.doubleEqual = doubleEqual
module.exports.doubleHash = doubleHash
module.exports.fdwalkSetCloexec = fdwalkSetCloexec
module.exports.fileErrorQuark = fileErrorQuark
module.exports.free = free
module.exports.fsync = fsync
module.exports.getApplicationName = getApplicationName
module.exports.getCodeset = getCodeset
module.exports.getCurrentDir = getCurrentDir
module.exports.getHomeDir = getHomeDir
module.exports.getHostName = getHostName
module.exports.getMonotonicTime = getMonotonicTime
module.exports.getNumProcessors = getNumProcessors
module.exports.getPrgname = getPrgname
module.exports.getRealName = getRealName
module.exports.getRealTime = getRealTime
module.exports.getTmpDir = getTmpDir
module.exports.getUserCacheDir = getUserCacheDir
module.exports.getUserConfigDir = getUserConfigDir
module.exports.getUserDataDir = getUserDataDir
module.exports.getUserName = getUserName
module.exports.getUserRuntimeDir = getUserRuntimeDir
module.exports.getUserStateDir = getUserStateDir
module.exports.idleRemoveByData = idleRemoveByData
module.exports.int64Equal = int64Equal
module.exports.int64Hash = int64Hash
module.exports.intEqual = intEqual
module.exports.intHash = intHash
module.exports.ioChannelErrorQuark = ioChannelErrorQuark
module.exports.keyFileErrorQuark = keyFileErrorQuark
module.exports.listPopAllocator = listPopAllocator
module.exports.logGetDebugEnabled = logGetDebugEnabled
module.exports.logSetDebugEnabled = logSetDebugEnabled
module.exports.logWriterDefaultSetUseStderr = logWriterDefaultSetUseStderr
module.exports.logWriterIsJournald = logWriterIsJournald
module.exports.logWriterSupportsColor = logWriterSupportsColor
module.exports.mainDepth = mainDepth
module.exports.markupErrorQuark = markupErrorQuark
module.exports.memChunkInfo = memChunkInfo
module.exports.nodePopAllocator = nodePopAllocator
module.exports.nullifyPointer = nullifyPointer
module.exports.numberParserErrorQuark = numberParserErrorQuark
module.exports.onceInitEnterPointer = onceInitEnterPointer
module.exports.onceInitLeavePointer = onceInitLeavePointer
module.exports.optionErrorQuark = optionErrorQuark
module.exports.pathBufEqual = pathBufEqual
module.exports.pointerBitLock = pointerBitLock
module.exports.pointerBitTrylock = pointerBitTrylock
module.exports.pointerBitUnlock = pointerBitUnlock
module.exports.quarkToString = quarkToString
module.exports.randomInt = randomInt
module.exports.randomIntRange = randomIntRange
module.exports.randomSetSeed = randomSetSeed
module.exports.rcBoxRelease = rcBoxRelease
module.exports.refCountCompare = refCountCompare
module.exports.refCountDec = refCountDec
module.exports.refCountInc = refCountInc
module.exports.refCountInit = refCountInit
module.exports.regexErrorQuark = regexErrorQuark
module.exports.reloadUserSpecialDirsCache = reloadUserSpecialDirsCache
module.exports.shellErrorQuark = shellErrorQuark
module.exports.slistPopAllocator = slistPopAllocator
module.exports.sourceRemove = sourceRemove
module.exports.sourceRemoveByUserData = sourceRemoveByUserData
module.exports.spacedPrimesClosest = spacedPrimesClosest
module.exports.spawnCheckWaitStatus = spawnCheckWaitStatus
module.exports.spawnClosePid = spawnClosePid
module.exports.spawnErrorQuark = spawnErrorQuark
module.exports.spawnExitErrorQuark = spawnExitErrorQuark
module.exports.strEqual = strEqual
module.exports.strHash = strHash
module.exports.strerror = strerror
module.exports.strsignal = strsignal
module.exports.testDisableCrashReporting = testDisableCrashReporting
module.exports.testFail = testFail
module.exports.testFailed = testFailed
module.exports.testGetPath = testGetPath
module.exports.testQueueFree = testQueueFree
module.exports.testRandInt = testRandInt
module.exports.testRandIntRange = testRandIntRange
module.exports.testRun = testRun
module.exports.testSetNonfatalAssertions = testSetNonfatalAssertions
module.exports.testSubprocess = testSubprocess
module.exports.testTimerStart = testTimerStart
module.exports.testTrapHasPassed = testTrapHasPassed
module.exports.testTrapReachedTimeout = testTrapReachedTimeout
module.exports.threadErrorQuark = threadErrorQuark
module.exports.threadExit = threadExit
module.exports.threadPoolGetMaxIdleTime = threadPoolGetMaxIdleTime
module.exports.threadPoolGetMaxUnusedThreads = threadPoolGetMaxUnusedThreads
module.exports.threadPoolGetNumUnusedThreads = threadPoolGetNumUnusedThreads
module.exports.threadPoolSetMaxIdleTime = threadPoolSetMaxIdleTime
module.exports.threadPoolSetMaxUnusedThreads = threadPoolSetMaxUnusedThreads
module.exports.threadPoolStopUnusedThreads = threadPoolStopUnusedThreads
module.exports.threadYield = threadYield
module.exports.unixErrorQuark = unixErrorQuark
module.exports.unixSetFdNonblocking = unixSetFdNonblocking
module.exports.uriErrorQuark = uriErrorQuark
module.exports.uuidStringRandom = uuidStringRandom
module.exports.variantParseErrorQuark = variantParseErrorQuark
